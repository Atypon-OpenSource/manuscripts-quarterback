// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated"
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  firstname String    @db.VarChar(255)
  lastname  String    @db.VarChar(255)
  password  String    @db.VarChar(255)
  role      UserRole  @default(USER)
  docs      PmDoc[]   @relation("PmDocToUser")
  reviews   Review[]  @relation("ReviewToUser")
  comments  Comment[] @relation("CommentToUser")

  @@map("quarterback_user")
}

enum DocStatus {
  EDITABLE
  WAITING_REVIEW
  IN_REVIEW
  READ_ONLY
}

model PmDoc {
  id        String          @id @default(uuid())
  name      String          @db.VarChar(500)
  doc       Json
  status    DocStatus       @default(EDITABLE)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  user      User            @relation("PmDocToUser", fields: [user_id], references: [id])
  user_id   String
  snapshots PmDocSnapshot[] @relation("PmDocSnapshotToPmDoc")
  reviews   Review[]        @relation("ReviewToPmDoc")
  comments  Comment[]       @relation("CommentToPmDoc")

  @@map("pm_doc")
}

model PmDocSnapshot {
  id                 String    @id @default(uuid())
  name               String    @default("") @db.VarChar(500)
  snapshot           Json
  createdAt          DateTime  @default(now())
  doc                PmDoc     @relation("PmDocSnapshotToPmDoc", fields: [doc_id], references: [id], onDelete: Cascade)
  doc_id             String
  before_snap_review Review?   @relation("beforeSnapshot")
  after_snap_review  Review?   @relation("afterSnapshot")
  comments           Comment[] @relation("CommentToPmDocSnapshot")

  @@map("pm_doc_snapshot")
}

model Comment {
  id          String         @id @default(uuid())
  body        String
  createdAt   DateTime       @default(now())
  change_id   String
  user        User           @relation("CommentToUser", fields: [user_id], references: [id])
  user_id     String
  doc         PmDoc          @relation("CommentToPmDoc", fields: [doc_id], references: [id], onDelete: Cascade)
  doc_id      String
  snapshot    PmDocSnapshot? @relation("CommentToPmDocSnapshot", fields: [snapshot_id], references: [id], onDelete: Cascade)
  snapshot_id String?

  @@map("comment")
}

enum ReviewStatus {
  IN_PROGRESS
  COMPLETED
}

model Review {
  id                 String         @id @default(uuid())
  name               String         @default("") @db.VarChar(500)
  status             ReviewStatus   @default(IN_PROGRESS)
  createdAt          DateTime       @default(now())
  user               User           @relation("ReviewToUser", fields: [user_id], references: [id])
  user_id            String
  changes            String[]
  doc                PmDoc          @relation("ReviewToPmDoc", fields: [doc_id], references: [id], onDelete: Cascade)
  doc_id             String
  before_snapshot    PmDocSnapshot  @relation("beforeSnapshot", fields: [before_snapshot_id], references: [id])
  before_snapshot_id String
  after_snapshot     PmDocSnapshot? @relation("afterSnapshot", fields: [after_snapshot_id], references: [id])
  after_snapshot_id  String?

  @@map("review")
}
